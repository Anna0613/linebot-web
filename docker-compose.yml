version: '3.8'

services:
  # 後端 API 服務
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: linebot-web-backend
    ports:
      - "8000:8000"
    environment:
      - ENV=production
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - /app/venv  # 排除虛擬環境
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - linebot-network

  # 前端服務
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: linebot-web-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_UNIFIED_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules  # 排除 node_modules
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - linebot-network

  # 資料庫服務
  db:
    image: postgres:15-alpine
    container_name: linebot-web-db
    environment:
      POSTGRES_DB: linebot_web
      POSTGRES_USER: linebot_user
      POSTGRES_PASSWORD: linebot_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - linebot-network

  # Redis 快取服務
  redis:
    image: redis:7-alpine
    container_name: linebot-web-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - linebot-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: linebot-web-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - linebot-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  linebot-network:
    driver: bridge