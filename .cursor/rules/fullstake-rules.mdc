---
description: 
globs: 
alwaysApply: true
---
1. 組件化至上
全面組件化：將程式碼的各個部分，包括常數、錯誤處理類別、API 呼叫等，都拆解為獨立的組件。
高內聚低耦合：追求程式碼的整潔性，讓組件的職責單一化，有利於後續的維護與自動化處理（如 AI 分析）。
2. 遵循通用規範與清晰命名
採用標準寫法：遵從 React 和 Next.js 的通用開發規範。
命名清晰：確保所有組件、文件和資料夾的命名都直觀、有意義，能夠清楚表達其功能和分類。
3. 細緻化程式碼與重用性
功能細分：盡可能按功能將程式碼拆解得更細，尤其是在大型專案中，細緻的拆分有助於管理和理解。
提升通用性：識別可重用的程式碼段落，並將其提取為通用組件，以減少重複程式碼並提高開發效率。
4. 優化測試流程
利於單元測試：透過高度組件化和細緻拆分，顯著簡化單元測試的撰寫與執行。
5. 模組化的檔案結構
路由處理單一化：page.tsx 文件應專注於處理路由邏輯，避免包含過多的組件實現細節。
清晰的目錄結構：建議採用模組化的檔案結構，例如：
/volunteer/page.tsx (路由處理)
/volunteer/[id]/page.tsx
/volunteer/[id]/components (該路由下的專屬組件)
/volunteer/[id]/components/activity-detail/ (特定功能的組件目錄)
/volunteer/[id]/components/hero/
/volunteer/[id]/components/shared/ (該路由下可共享的組件)
工具函數集中管理：將通用的工具函數（utilities）統一放置在 utils/ 目錄中。